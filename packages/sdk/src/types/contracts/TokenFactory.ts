/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace ITERC20 {
  export type ConstructorParamsStruct = {
    name: string;
    symbol: string;
    contractURI: string;
    decimals: BigNumberish;
    totalSupplyCap: BigNumberish;
  };

  export type ConstructorParamsStructOutput = [
    string,
    string,
    string,
    number,
    BigNumber
  ] & {
    name: string;
    symbol: string;
    contractURI: string;
    decimals: number;
    totalSupplyCap: BigNumber;
  };
}

export declare namespace ITERC721 {
  export type ConstructorParamsStruct = {
    name: string;
    symbol: string;
    contractURI: string;
    baseURI: string;
    totalSupplyCap: BigNumberish;
  };

  export type ConstructorParamsStructOutput = [
    string,
    string,
    string,
    string,
    BigNumber
  ] & {
    name: string;
    symbol: string;
    contractURI: string;
    baseURI: string;
    totalSupplyCap: BigNumber;
  };
}

export interface TokenFactoryInterface extends utils.Interface {
  functions: {
    "CREATE_PERMISSION()": FunctionFragment;
    "EXECUTE_PERMISSION()": FunctionFragment;
    "TOKEN_FACTORY_RESOURCE()": FunctionFragment;
    "TOKEN_REGISTRY_DEP()": FunctionFragment;
    "deployTERC20((string,string,string,uint8,uint256))": FunctionFragment;
    "deployTERC721((string,string,string,string,uint256))": FunctionFragment;
    "getInjector()": FunctionFragment;
    "requestTERC20((string,string,string,uint8,uint256),string)": FunctionFragment;
    "requestTERC721((string,string,string,string,uint256),string)": FunctionFragment;
    "setDependencies(address)": FunctionFragment;
    "setInjector(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "CREATE_PERMISSION"
      | "EXECUTE_PERMISSION"
      | "TOKEN_FACTORY_RESOURCE"
      | "TOKEN_REGISTRY_DEP"
      | "deployTERC20"
      | "deployTERC721"
      | "getInjector"
      | "requestTERC20"
      | "requestTERC721"
      | "setDependencies"
      | "setInjector"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "CREATE_PERMISSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "EXECUTE_PERMISSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TOKEN_FACTORY_RESOURCE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TOKEN_REGISTRY_DEP",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deployTERC20",
    values: [ITERC20.ConstructorParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "deployTERC721",
    values: [ITERC721.ConstructorParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getInjector",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestTERC20",
    values: [ITERC20.ConstructorParamsStruct, string]
  ): string;
  encodeFunctionData(
    functionFragment: "requestTERC721",
    values: [ITERC721.ConstructorParamsStruct, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setDependencies",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setInjector", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "CREATE_PERMISSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "EXECUTE_PERMISSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TOKEN_FACTORY_RESOURCE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TOKEN_REGISTRY_DEP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployTERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployTERC721",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInjector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestTERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestTERC721",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDependencies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInjector",
    data: BytesLike
  ): Result;

  events: {
    "DeployedTERC20(address)": EventFragment;
    "DeployedTERC721(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DeployedTERC20"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DeployedTERC721"): EventFragment;
}

export interface DeployedTERC20EventObject {
  token: string;
}
export type DeployedTERC20Event = TypedEvent<
  [string],
  DeployedTERC20EventObject
>;

export type DeployedTERC20EventFilter = TypedEventFilter<DeployedTERC20Event>;

export interface DeployedTERC721EventObject {
  token: string;
}
export type DeployedTERC721Event = TypedEvent<
  [string],
  DeployedTERC721EventObject
>;

export type DeployedTERC721EventFilter = TypedEventFilter<DeployedTERC721Event>;

export interface TokenFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TokenFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    CREATE_PERMISSION(overrides?: CallOverrides): Promise<[string]>;

    EXECUTE_PERMISSION(overrides?: CallOverrides): Promise<[string]>;

    TOKEN_FACTORY_RESOURCE(overrides?: CallOverrides): Promise<[string]>;

    TOKEN_REGISTRY_DEP(overrides?: CallOverrides): Promise<[string]>;

    deployTERC20(
      params_: ITERC20.ConstructorParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    deployTERC721(
      params_: ITERC721.ConstructorParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getInjector(
      overrides?: CallOverrides
    ): Promise<[string] & { _injector: string }>;

    requestTERC20(
      params_: ITERC20.ConstructorParamsStruct,
      description_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    requestTERC721(
      params_: ITERC721.ConstructorParamsStruct,
      description_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setDependencies(
      registryAddress_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setInjector(
      _injector: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  CREATE_PERMISSION(overrides?: CallOverrides): Promise<string>;

  EXECUTE_PERMISSION(overrides?: CallOverrides): Promise<string>;

  TOKEN_FACTORY_RESOURCE(overrides?: CallOverrides): Promise<string>;

  TOKEN_REGISTRY_DEP(overrides?: CallOverrides): Promise<string>;

  deployTERC20(
    params_: ITERC20.ConstructorParamsStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  deployTERC721(
    params_: ITERC721.ConstructorParamsStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getInjector(overrides?: CallOverrides): Promise<string>;

  requestTERC20(
    params_: ITERC20.ConstructorParamsStruct,
    description_: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  requestTERC721(
    params_: ITERC721.ConstructorParamsStruct,
    description_: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setDependencies(
    registryAddress_: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setInjector(
    _injector: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    CREATE_PERMISSION(overrides?: CallOverrides): Promise<string>;

    EXECUTE_PERMISSION(overrides?: CallOverrides): Promise<string>;

    TOKEN_FACTORY_RESOURCE(overrides?: CallOverrides): Promise<string>;

    TOKEN_REGISTRY_DEP(overrides?: CallOverrides): Promise<string>;

    deployTERC20(
      params_: ITERC20.ConstructorParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    deployTERC721(
      params_: ITERC721.ConstructorParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    getInjector(overrides?: CallOverrides): Promise<string>;

    requestTERC20(
      params_: ITERC20.ConstructorParamsStruct,
      description_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    requestTERC721(
      params_: ITERC721.ConstructorParamsStruct,
      description_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setDependencies(
      registryAddress_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setInjector(_injector: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "DeployedTERC20(address)"(token?: null): DeployedTERC20EventFilter;
    DeployedTERC20(token?: null): DeployedTERC20EventFilter;

    "DeployedTERC721(address)"(token?: null): DeployedTERC721EventFilter;
    DeployedTERC721(token?: null): DeployedTERC721EventFilter;
  };

  estimateGas: {
    CREATE_PERMISSION(overrides?: CallOverrides): Promise<BigNumber>;

    EXECUTE_PERMISSION(overrides?: CallOverrides): Promise<BigNumber>;

    TOKEN_FACTORY_RESOURCE(overrides?: CallOverrides): Promise<BigNumber>;

    TOKEN_REGISTRY_DEP(overrides?: CallOverrides): Promise<BigNumber>;

    deployTERC20(
      params_: ITERC20.ConstructorParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    deployTERC721(
      params_: ITERC721.ConstructorParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getInjector(overrides?: CallOverrides): Promise<BigNumber>;

    requestTERC20(
      params_: ITERC20.ConstructorParamsStruct,
      description_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    requestTERC721(
      params_: ITERC721.ConstructorParamsStruct,
      description_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setDependencies(
      registryAddress_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setInjector(
      _injector: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    CREATE_PERMISSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    EXECUTE_PERMISSION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    TOKEN_FACTORY_RESOURCE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    TOKEN_REGISTRY_DEP(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deployTERC20(
      params_: ITERC20.ConstructorParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    deployTERC721(
      params_: ITERC721.ConstructorParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getInjector(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    requestTERC20(
      params_: ITERC20.ConstructorParamsStruct,
      description_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    requestTERC721(
      params_: ITERC721.ConstructorParamsStruct,
      description_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setDependencies(
      registryAddress_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setInjector(
      _injector: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
