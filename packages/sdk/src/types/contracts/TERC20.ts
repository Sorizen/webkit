/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace ITERC20 {
  export type ConstructorParamsStruct = {
    name: string;
    symbol: string;
    contractURI: string;
    decimals: BigNumberish;
    totalSupplyCap: BigNumberish;
  };

  export type ConstructorParamsStructOutput = [
    string,
    string,
    string,
    number,
    BigNumber
  ] & {
    name: string;
    symbol: string;
    contractURI: string;
    decimals: number;
    totalSupplyCap: BigNumber;
  };
}

export interface TERC20Interface extends utils.Interface {
  functions: {
    "BURN_PERMISSION()": FunctionFragment;
    "CHANGE_METADATA_PERMISSION()": FunctionFragment;
    "MINT_PERMISSION()": FunctionFragment;
    "RECEIVE_PERMISSION()": FunctionFragment;
    "SPEND_PERMISSION()": FunctionFragment;
    "TERC20_RESOURCE()": FunctionFragment;
    "__TERC20_init((string,string,string,uint8,uint256),string)": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "burnFrom(address,uint256)": FunctionFragment;
    "contractURI()": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "getInjector()": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "mintTo(address,uint256)": FunctionFragment;
    "name()": FunctionFragment;
    "setContractMetadata(string)": FunctionFragment;
    "setDependencies(address)": FunctionFragment;
    "setInjector(address)": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "totalSupplyCap()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "BURN_PERMISSION"
      | "CHANGE_METADATA_PERMISSION"
      | "MINT_PERMISSION"
      | "RECEIVE_PERMISSION"
      | "SPEND_PERMISSION"
      | "TERC20_RESOURCE"
      | "__TERC20_init"
      | "allowance"
      | "approve"
      | "balanceOf"
      | "burnFrom"
      | "contractURI"
      | "decimals"
      | "decreaseAllowance"
      | "getInjector"
      | "increaseAllowance"
      | "mintTo"
      | "name"
      | "setContractMetadata"
      | "setDependencies"
      | "setInjector"
      | "symbol"
      | "totalSupply"
      | "totalSupplyCap"
      | "transfer"
      | "transferFrom"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "BURN_PERMISSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CHANGE_METADATA_PERMISSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MINT_PERMISSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "RECEIVE_PERMISSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SPEND_PERMISSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TERC20_RESOURCE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "__TERC20_init",
    values: [ITERC20.ConstructorParamsStruct, string]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "burnFrom",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "contractURI",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getInjector",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintTo",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setContractMetadata",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setDependencies",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setInjector", values: [string]): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupplyCap",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "BURN_PERMISSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CHANGE_METADATA_PERMISSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MINT_PERMISSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "RECEIVE_PERMISSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SPEND_PERMISSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TERC20_RESOURCE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "__TERC20_init",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burnFrom", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "contractURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInjector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintTo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setContractMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDependencies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInjector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupplyCap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "ContractURIChanged(string)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ContractURIChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface ContractURIChangedEventObject {
  contractURI: string;
}
export type ContractURIChangedEvent = TypedEvent<
  [string],
  ContractURIChangedEventObject
>;

export type ContractURIChangedEventFilter =
  TypedEventFilter<ContractURIChangedEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface TERC20 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TERC20Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BURN_PERMISSION(overrides?: CallOverrides): Promise<[string]>;

    CHANGE_METADATA_PERMISSION(overrides?: CallOverrides): Promise<[string]>;

    MINT_PERMISSION(overrides?: CallOverrides): Promise<[string]>;

    RECEIVE_PERMISSION(overrides?: CallOverrides): Promise<[string]>;

    SPEND_PERMISSION(overrides?: CallOverrides): Promise<[string]>;

    TERC20_RESOURCE(overrides?: CallOverrides): Promise<[string]>;

    __TERC20_init(
      params_: ITERC20.ConstructorParamsStruct,
      resource_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    burnFrom(
      account_: string,
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    contractURI(overrides?: CallOverrides): Promise<[string]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getInjector(
      overrides?: CallOverrides
    ): Promise<[string] & { _injector: string }>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    mintTo(
      account_: string,
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    setContractMetadata(
      contractURI_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setDependencies(
      registryAddress_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setInjector(
      _injector: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupplyCap(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  BURN_PERMISSION(overrides?: CallOverrides): Promise<string>;

  CHANGE_METADATA_PERMISSION(overrides?: CallOverrides): Promise<string>;

  MINT_PERMISSION(overrides?: CallOverrides): Promise<string>;

  RECEIVE_PERMISSION(overrides?: CallOverrides): Promise<string>;

  SPEND_PERMISSION(overrides?: CallOverrides): Promise<string>;

  TERC20_RESOURCE(overrides?: CallOverrides): Promise<string>;

  __TERC20_init(
    params_: ITERC20.ConstructorParamsStruct,
    resource_: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  burnFrom(
    account_: string,
    amount_: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  contractURI(overrides?: CallOverrides): Promise<string>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getInjector(overrides?: CallOverrides): Promise<string>;

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  mintTo(
    account_: string,
    amount_: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  setContractMetadata(
    contractURI_: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setDependencies(
    registryAddress_: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setInjector(
    _injector: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupplyCap(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferFrom(
    from: string,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    BURN_PERMISSION(overrides?: CallOverrides): Promise<string>;

    CHANGE_METADATA_PERMISSION(overrides?: CallOverrides): Promise<string>;

    MINT_PERMISSION(overrides?: CallOverrides): Promise<string>;

    RECEIVE_PERMISSION(overrides?: CallOverrides): Promise<string>;

    SPEND_PERMISSION(overrides?: CallOverrides): Promise<string>;

    TERC20_RESOURCE(overrides?: CallOverrides): Promise<string>;

    __TERC20_init(
      params_: ITERC20.ConstructorParamsStruct,
      resource_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    burnFrom(
      account_: string,
      amount_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    contractURI(overrides?: CallOverrides): Promise<string>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getInjector(overrides?: CallOverrides): Promise<string>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    mintTo(
      account_: string,
      amount_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    setContractMetadata(
      contractURI_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setDependencies(
      registryAddress_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setInjector(_injector: string, overrides?: CallOverrides): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupplyCap(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;

    "ContractURIChanged(string)"(
      contractURI?: null
    ): ContractURIChangedEventFilter;
    ContractURIChanged(contractURI?: null): ContractURIChangedEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;
  };

  estimateGas: {
    BURN_PERMISSION(overrides?: CallOverrides): Promise<BigNumber>;

    CHANGE_METADATA_PERMISSION(overrides?: CallOverrides): Promise<BigNumber>;

    MINT_PERMISSION(overrides?: CallOverrides): Promise<BigNumber>;

    RECEIVE_PERMISSION(overrides?: CallOverrides): Promise<BigNumber>;

    SPEND_PERMISSION(overrides?: CallOverrides): Promise<BigNumber>;

    TERC20_RESOURCE(overrides?: CallOverrides): Promise<BigNumber>;

    __TERC20_init(
      params_: ITERC20.ConstructorParamsStruct,
      resource_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    burnFrom(
      account_: string,
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    contractURI(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getInjector(overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    mintTo(
      account_: string,
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    setContractMetadata(
      contractURI_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setDependencies(
      registryAddress_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setInjector(
      _injector: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupplyCap(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    BURN_PERMISSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    CHANGE_METADATA_PERMISSION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MINT_PERMISSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    RECEIVE_PERMISSION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    SPEND_PERMISSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TERC20_RESOURCE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    __TERC20_init(
      params_: ITERC20.ConstructorParamsStruct,
      resource_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    burnFrom(
      account_: string,
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    contractURI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getInjector(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    mintTo(
      account_: string,
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setContractMetadata(
      contractURI_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setDependencies(
      registryAddress_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setInjector(
      _injector: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupplyCap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
