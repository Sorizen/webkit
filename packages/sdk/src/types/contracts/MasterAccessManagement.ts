/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace IRBAC {
  export type ResourceWithPermissionsStruct = {
    resource: string;
    permissions: string[];
  };

  export type ResourceWithPermissionsStructOutput = [string, string[]] & {
    resource: string;
    permissions: string[];
  };
}

export interface MasterAccessManagementInterface extends utils.Interface {
  functions: {
    "ALL_PERMISSION()": FunctionFragment;
    "ALL_RESOURCE()": FunctionFragment;
    "CONSTANTS_REGISTRY_RESOURCE()": FunctionFragment;
    "CREATE_PERMISSION()": FunctionFragment;
    "DELETE_PERMISSION()": FunctionFragment;
    "EXECUTE_PERMISSION()": FunctionFragment;
    "MASTER_REGISTRY_RESOURCE()": FunctionFragment;
    "MASTER_ROLE()": FunctionFragment;
    "RBAC_RESOURCE()": FunctionFragment;
    "READ_PERMISSION()": FunctionFragment;
    "REVIEWABLE_REQUESTS_RESOURCE()": FunctionFragment;
    "UPDATE_PERMISSION()": FunctionFragment;
    "__MasterAccessManagement_init(address)": FunctionFragment;
    "addCombinedPermissionsToRole(string,string,(string,string[])[],(string,string[])[])": FunctionFragment;
    "addPermissionsToRole(string,(string,string[])[],bool)": FunctionFragment;
    "getRolePermissions(string)": FunctionFragment;
    "getUserRoles(address)": FunctionFragment;
    "grantRoles(address,string[])": FunctionFragment;
    "hasConstantsRegistryCreatePermission(address)": FunctionFragment;
    "hasConstantsRegistryDeletePermission(address)": FunctionFragment;
    "hasMasterContractsRegistryCreatePermission(address)": FunctionFragment;
    "hasMasterContractsRegistryDeletePermission(address)": FunctionFragment;
    "hasMasterContractsRegistryUpdatePermission(address)": FunctionFragment;
    "hasPermission(address,string,string)": FunctionFragment;
    "hasReviewableRequestsCreatePermission(address)": FunctionFragment;
    "hasReviewableRequestsDeletePermission(address)": FunctionFragment;
    "hasReviewableRequestsExecutePermission(address)": FunctionFragment;
    "removeCombinedPermissionsFromRole(string,(string,string[])[],(string,string[])[])": FunctionFragment;
    "removePermissionsFromRole(string,(string,string[])[],bool)": FunctionFragment;
    "revokeRoles(address,string[])": FunctionFragment;
    "updateRolePermissions(string,string,(string,string[])[],(string,string[])[],(string,string[])[],(string,string[])[])": FunctionFragment;
    "updateUserRoles(address,string[],string[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "ALL_PERMISSION"
      | "ALL_RESOURCE"
      | "CONSTANTS_REGISTRY_RESOURCE"
      | "CREATE_PERMISSION"
      | "DELETE_PERMISSION"
      | "EXECUTE_PERMISSION"
      | "MASTER_REGISTRY_RESOURCE"
      | "MASTER_ROLE"
      | "RBAC_RESOURCE"
      | "READ_PERMISSION"
      | "REVIEWABLE_REQUESTS_RESOURCE"
      | "UPDATE_PERMISSION"
      | "__MasterAccessManagement_init"
      | "addCombinedPermissionsToRole"
      | "addPermissionsToRole"
      | "getRolePermissions"
      | "getUserRoles"
      | "grantRoles"
      | "hasConstantsRegistryCreatePermission"
      | "hasConstantsRegistryDeletePermission"
      | "hasMasterContractsRegistryCreatePermission"
      | "hasMasterContractsRegistryDeletePermission"
      | "hasMasterContractsRegistryUpdatePermission"
      | "hasPermission"
      | "hasReviewableRequestsCreatePermission"
      | "hasReviewableRequestsDeletePermission"
      | "hasReviewableRequestsExecutePermission"
      | "removeCombinedPermissionsFromRole"
      | "removePermissionsFromRole"
      | "revokeRoles"
      | "updateRolePermissions"
      | "updateUserRoles"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "ALL_PERMISSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ALL_RESOURCE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CONSTANTS_REGISTRY_RESOURCE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CREATE_PERMISSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DELETE_PERMISSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "EXECUTE_PERMISSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MASTER_REGISTRY_RESOURCE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MASTER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "RBAC_RESOURCE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "READ_PERMISSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REVIEWABLE_REQUESTS_RESOURCE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UPDATE_PERMISSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "__MasterAccessManagement_init",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "addCombinedPermissionsToRole",
    values: [
      string,
      string,
      IRBAC.ResourceWithPermissionsStruct[],
      IRBAC.ResourceWithPermissionsStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addPermissionsToRole",
    values: [string, IRBAC.ResourceWithPermissionsStruct[], boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getRolePermissions",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserRoles",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRoles",
    values: [string, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "hasConstantsRegistryCreatePermission",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasConstantsRegistryDeletePermission",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasMasterContractsRegistryCreatePermission",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasMasterContractsRegistryDeletePermission",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasMasterContractsRegistryUpdatePermission",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasPermission",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasReviewableRequestsCreatePermission",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasReviewableRequestsDeletePermission",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasReviewableRequestsExecutePermission",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeCombinedPermissionsFromRole",
    values: [
      string,
      IRBAC.ResourceWithPermissionsStruct[],
      IRBAC.ResourceWithPermissionsStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removePermissionsFromRole",
    values: [string, IRBAC.ResourceWithPermissionsStruct[], boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRoles",
    values: [string, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRolePermissions",
    values: [
      string,
      string,
      IRBAC.ResourceWithPermissionsStruct[],
      IRBAC.ResourceWithPermissionsStruct[],
      IRBAC.ResourceWithPermissionsStruct[],
      IRBAC.ResourceWithPermissionsStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateUserRoles",
    values: [string, string[], string[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "ALL_PERMISSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ALL_RESOURCE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CONSTANTS_REGISTRY_RESOURCE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CREATE_PERMISSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DELETE_PERMISSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "EXECUTE_PERMISSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MASTER_REGISTRY_RESOURCE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MASTER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "RBAC_RESOURCE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "READ_PERMISSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REVIEWABLE_REQUESTS_RESOURCE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UPDATE_PERMISSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "__MasterAccessManagement_init",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addCombinedPermissionsToRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addPermissionsToRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRolePermissions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserRoles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRoles", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hasConstantsRegistryCreatePermission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasConstantsRegistryDeletePermission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasMasterContractsRegistryCreatePermission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasMasterContractsRegistryDeletePermission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasMasterContractsRegistryUpdatePermission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasPermission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasReviewableRequestsCreatePermission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasReviewableRequestsDeletePermission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasReviewableRequestsExecutePermission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeCombinedPermissionsFromRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removePermissionsFromRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeRoles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRolePermissions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateUserRoles",
    data: BytesLike
  ): Result;

  events: {
    "AddedPermissions(string,string,string[],bool)": EventFragment;
    "AddedRoleWithDescription(string,string)": EventFragment;
    "GrantedRoles(address,string[])": EventFragment;
    "RemovedPermissions(string,string,string[],bool)": EventFragment;
    "RevokedRoles(address,string[])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddedPermissions"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AddedRoleWithDescription"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GrantedRoles"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemovedPermissions"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RevokedRoles"): EventFragment;
}

export interface AddedPermissionsEventObject {
  role: string;
  resource: string;
  permissionsToAdd: string[];
  allowed: boolean;
}
export type AddedPermissionsEvent = TypedEvent<
  [string, string, string[], boolean],
  AddedPermissionsEventObject
>;

export type AddedPermissionsEventFilter =
  TypedEventFilter<AddedPermissionsEvent>;

export interface AddedRoleWithDescriptionEventObject {
  role: string;
  description: string;
}
export type AddedRoleWithDescriptionEvent = TypedEvent<
  [string, string],
  AddedRoleWithDescriptionEventObject
>;

export type AddedRoleWithDescriptionEventFilter =
  TypedEventFilter<AddedRoleWithDescriptionEvent>;

export interface GrantedRolesEventObject {
  to: string;
  rolesToGrant: string[];
}
export type GrantedRolesEvent = TypedEvent<
  [string, string[]],
  GrantedRolesEventObject
>;

export type GrantedRolesEventFilter = TypedEventFilter<GrantedRolesEvent>;

export interface RemovedPermissionsEventObject {
  role: string;
  resource: string;
  permissionsToRemove: string[];
  allowed: boolean;
}
export type RemovedPermissionsEvent = TypedEvent<
  [string, string, string[], boolean],
  RemovedPermissionsEventObject
>;

export type RemovedPermissionsEventFilter =
  TypedEventFilter<RemovedPermissionsEvent>;

export interface RevokedRolesEventObject {
  from: string;
  rolesToRevoke: string[];
}
export type RevokedRolesEvent = TypedEvent<
  [string, string[]],
  RevokedRolesEventObject
>;

export type RevokedRolesEventFilter = TypedEventFilter<RevokedRolesEvent>;

export interface MasterAccessManagement extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MasterAccessManagementInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ALL_PERMISSION(overrides?: CallOverrides): Promise<[string]>;

    ALL_RESOURCE(overrides?: CallOverrides): Promise<[string]>;

    CONSTANTS_REGISTRY_RESOURCE(overrides?: CallOverrides): Promise<[string]>;

    CREATE_PERMISSION(overrides?: CallOverrides): Promise<[string]>;

    DELETE_PERMISSION(overrides?: CallOverrides): Promise<[string]>;

    EXECUTE_PERMISSION(overrides?: CallOverrides): Promise<[string]>;

    MASTER_REGISTRY_RESOURCE(overrides?: CallOverrides): Promise<[string]>;

    MASTER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    RBAC_RESOURCE(overrides?: CallOverrides): Promise<[string]>;

    READ_PERMISSION(overrides?: CallOverrides): Promise<[string]>;

    REVIEWABLE_REQUESTS_RESOURCE(overrides?: CallOverrides): Promise<[string]>;

    UPDATE_PERMISSION(overrides?: CallOverrides): Promise<[string]>;

    __MasterAccessManagement_init(
      master_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    addCombinedPermissionsToRole(
      role_: string,
      description_: string,
      allowed_: IRBAC.ResourceWithPermissionsStruct[],
      disallowed_: IRBAC.ResourceWithPermissionsStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    addPermissionsToRole(
      role: string,
      permissionsToAdd: IRBAC.ResourceWithPermissionsStruct[],
      allowed: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getRolePermissions(
      role: string,
      overrides?: CallOverrides
    ): Promise<
      [
        IRBAC.ResourceWithPermissionsStructOutput[],
        IRBAC.ResourceWithPermissionsStructOutput[]
      ] & {
        allowed: IRBAC.ResourceWithPermissionsStructOutput[];
        disallowed: IRBAC.ResourceWithPermissionsStructOutput[];
      }
    >;

    getUserRoles(
      who: string,
      overrides?: CallOverrides
    ): Promise<[string[]] & { roles: string[] }>;

    grantRoles(
      to: string,
      rolesToGrant: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    hasConstantsRegistryCreatePermission(
      account_: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    hasConstantsRegistryDeletePermission(
      account_: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    hasMasterContractsRegistryCreatePermission(
      account_: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    hasMasterContractsRegistryDeletePermission(
      account_: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    hasMasterContractsRegistryUpdatePermission(
      account_: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    hasPermission(
      who: string,
      resource: string,
      permission: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    hasReviewableRequestsCreatePermission(
      account_: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    hasReviewableRequestsDeletePermission(
      account_: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    hasReviewableRequestsExecutePermission(
      account_: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    removeCombinedPermissionsFromRole(
      role_: string,
      allowed_: IRBAC.ResourceWithPermissionsStruct[],
      disallowed_: IRBAC.ResourceWithPermissionsStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    removePermissionsFromRole(
      role: string,
      permissionsToRemove: IRBAC.ResourceWithPermissionsStruct[],
      allowed: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    revokeRoles(
      from: string,
      rolesToRevoke: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateRolePermissions(
      role_: string,
      description_: string,
      allowedToRemove_: IRBAC.ResourceWithPermissionsStruct[],
      disallowedToRemove_: IRBAC.ResourceWithPermissionsStruct[],
      allowedToAdd_: IRBAC.ResourceWithPermissionsStruct[],
      disallowedToAdd_: IRBAC.ResourceWithPermissionsStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateUserRoles(
      user_: string,
      rolesToRevoke_: string[],
      rolesToGrant_: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  ALL_PERMISSION(overrides?: CallOverrides): Promise<string>;

  ALL_RESOURCE(overrides?: CallOverrides): Promise<string>;

  CONSTANTS_REGISTRY_RESOURCE(overrides?: CallOverrides): Promise<string>;

  CREATE_PERMISSION(overrides?: CallOverrides): Promise<string>;

  DELETE_PERMISSION(overrides?: CallOverrides): Promise<string>;

  EXECUTE_PERMISSION(overrides?: CallOverrides): Promise<string>;

  MASTER_REGISTRY_RESOURCE(overrides?: CallOverrides): Promise<string>;

  MASTER_ROLE(overrides?: CallOverrides): Promise<string>;

  RBAC_RESOURCE(overrides?: CallOverrides): Promise<string>;

  READ_PERMISSION(overrides?: CallOverrides): Promise<string>;

  REVIEWABLE_REQUESTS_RESOURCE(overrides?: CallOverrides): Promise<string>;

  UPDATE_PERMISSION(overrides?: CallOverrides): Promise<string>;

  __MasterAccessManagement_init(
    master_: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  addCombinedPermissionsToRole(
    role_: string,
    description_: string,
    allowed_: IRBAC.ResourceWithPermissionsStruct[],
    disallowed_: IRBAC.ResourceWithPermissionsStruct[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  addPermissionsToRole(
    role: string,
    permissionsToAdd: IRBAC.ResourceWithPermissionsStruct[],
    allowed: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getRolePermissions(
    role: string,
    overrides?: CallOverrides
  ): Promise<
    [
      IRBAC.ResourceWithPermissionsStructOutput[],
      IRBAC.ResourceWithPermissionsStructOutput[]
    ] & {
      allowed: IRBAC.ResourceWithPermissionsStructOutput[];
      disallowed: IRBAC.ResourceWithPermissionsStructOutput[];
    }
  >;

  getUserRoles(who: string, overrides?: CallOverrides): Promise<string[]>;

  grantRoles(
    to: string,
    rolesToGrant: string[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  hasConstantsRegistryCreatePermission(
    account_: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  hasConstantsRegistryDeletePermission(
    account_: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  hasMasterContractsRegistryCreatePermission(
    account_: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  hasMasterContractsRegistryDeletePermission(
    account_: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  hasMasterContractsRegistryUpdatePermission(
    account_: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  hasPermission(
    who: string,
    resource: string,
    permission: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  hasReviewableRequestsCreatePermission(
    account_: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  hasReviewableRequestsDeletePermission(
    account_: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  hasReviewableRequestsExecutePermission(
    account_: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  removeCombinedPermissionsFromRole(
    role_: string,
    allowed_: IRBAC.ResourceWithPermissionsStruct[],
    disallowed_: IRBAC.ResourceWithPermissionsStruct[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  removePermissionsFromRole(
    role: string,
    permissionsToRemove: IRBAC.ResourceWithPermissionsStruct[],
    allowed: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  revokeRoles(
    from: string,
    rolesToRevoke: string[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateRolePermissions(
    role_: string,
    description_: string,
    allowedToRemove_: IRBAC.ResourceWithPermissionsStruct[],
    disallowedToRemove_: IRBAC.ResourceWithPermissionsStruct[],
    allowedToAdd_: IRBAC.ResourceWithPermissionsStruct[],
    disallowedToAdd_: IRBAC.ResourceWithPermissionsStruct[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateUserRoles(
    user_: string,
    rolesToRevoke_: string[],
    rolesToGrant_: string[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    ALL_PERMISSION(overrides?: CallOverrides): Promise<string>;

    ALL_RESOURCE(overrides?: CallOverrides): Promise<string>;

    CONSTANTS_REGISTRY_RESOURCE(overrides?: CallOverrides): Promise<string>;

    CREATE_PERMISSION(overrides?: CallOverrides): Promise<string>;

    DELETE_PERMISSION(overrides?: CallOverrides): Promise<string>;

    EXECUTE_PERMISSION(overrides?: CallOverrides): Promise<string>;

    MASTER_REGISTRY_RESOURCE(overrides?: CallOverrides): Promise<string>;

    MASTER_ROLE(overrides?: CallOverrides): Promise<string>;

    RBAC_RESOURCE(overrides?: CallOverrides): Promise<string>;

    READ_PERMISSION(overrides?: CallOverrides): Promise<string>;

    REVIEWABLE_REQUESTS_RESOURCE(overrides?: CallOverrides): Promise<string>;

    UPDATE_PERMISSION(overrides?: CallOverrides): Promise<string>;

    __MasterAccessManagement_init(
      master_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addCombinedPermissionsToRole(
      role_: string,
      description_: string,
      allowed_: IRBAC.ResourceWithPermissionsStruct[],
      disallowed_: IRBAC.ResourceWithPermissionsStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    addPermissionsToRole(
      role: string,
      permissionsToAdd: IRBAC.ResourceWithPermissionsStruct[],
      allowed: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    getRolePermissions(
      role: string,
      overrides?: CallOverrides
    ): Promise<
      [
        IRBAC.ResourceWithPermissionsStructOutput[],
        IRBAC.ResourceWithPermissionsStructOutput[]
      ] & {
        allowed: IRBAC.ResourceWithPermissionsStructOutput[];
        disallowed: IRBAC.ResourceWithPermissionsStructOutput[];
      }
    >;

    getUserRoles(who: string, overrides?: CallOverrides): Promise<string[]>;

    grantRoles(
      to: string,
      rolesToGrant: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    hasConstantsRegistryCreatePermission(
      account_: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    hasConstantsRegistryDeletePermission(
      account_: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    hasMasterContractsRegistryCreatePermission(
      account_: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    hasMasterContractsRegistryDeletePermission(
      account_: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    hasMasterContractsRegistryUpdatePermission(
      account_: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    hasPermission(
      who: string,
      resource: string,
      permission: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    hasReviewableRequestsCreatePermission(
      account_: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    hasReviewableRequestsDeletePermission(
      account_: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    hasReviewableRequestsExecutePermission(
      account_: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    removeCombinedPermissionsFromRole(
      role_: string,
      allowed_: IRBAC.ResourceWithPermissionsStruct[],
      disallowed_: IRBAC.ResourceWithPermissionsStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    removePermissionsFromRole(
      role: string,
      permissionsToRemove: IRBAC.ResourceWithPermissionsStruct[],
      allowed: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRoles(
      from: string,
      rolesToRevoke: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    updateRolePermissions(
      role_: string,
      description_: string,
      allowedToRemove_: IRBAC.ResourceWithPermissionsStruct[],
      disallowedToRemove_: IRBAC.ResourceWithPermissionsStruct[],
      allowedToAdd_: IRBAC.ResourceWithPermissionsStruct[],
      disallowedToAdd_: IRBAC.ResourceWithPermissionsStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    updateUserRoles(
      user_: string,
      rolesToRevoke_: string[],
      rolesToGrant_: string[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AddedPermissions(string,string,string[],bool)"(
      role?: null,
      resource?: null,
      permissionsToAdd?: null,
      allowed?: null
    ): AddedPermissionsEventFilter;
    AddedPermissions(
      role?: null,
      resource?: null,
      permissionsToAdd?: null,
      allowed?: null
    ): AddedPermissionsEventFilter;

    "AddedRoleWithDescription(string,string)"(
      role?: null,
      description?: null
    ): AddedRoleWithDescriptionEventFilter;
    AddedRoleWithDescription(
      role?: null,
      description?: null
    ): AddedRoleWithDescriptionEventFilter;

    "GrantedRoles(address,string[])"(
      to?: null,
      rolesToGrant?: null
    ): GrantedRolesEventFilter;
    GrantedRoles(to?: null, rolesToGrant?: null): GrantedRolesEventFilter;

    "RemovedPermissions(string,string,string[],bool)"(
      role?: null,
      resource?: null,
      permissionsToRemove?: null,
      allowed?: null
    ): RemovedPermissionsEventFilter;
    RemovedPermissions(
      role?: null,
      resource?: null,
      permissionsToRemove?: null,
      allowed?: null
    ): RemovedPermissionsEventFilter;

    "RevokedRoles(address,string[])"(
      from?: null,
      rolesToRevoke?: null
    ): RevokedRolesEventFilter;
    RevokedRoles(from?: null, rolesToRevoke?: null): RevokedRolesEventFilter;
  };

  estimateGas: {
    ALL_PERMISSION(overrides?: CallOverrides): Promise<BigNumber>;

    ALL_RESOURCE(overrides?: CallOverrides): Promise<BigNumber>;

    CONSTANTS_REGISTRY_RESOURCE(overrides?: CallOverrides): Promise<BigNumber>;

    CREATE_PERMISSION(overrides?: CallOverrides): Promise<BigNumber>;

    DELETE_PERMISSION(overrides?: CallOverrides): Promise<BigNumber>;

    EXECUTE_PERMISSION(overrides?: CallOverrides): Promise<BigNumber>;

    MASTER_REGISTRY_RESOURCE(overrides?: CallOverrides): Promise<BigNumber>;

    MASTER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    RBAC_RESOURCE(overrides?: CallOverrides): Promise<BigNumber>;

    READ_PERMISSION(overrides?: CallOverrides): Promise<BigNumber>;

    REVIEWABLE_REQUESTS_RESOURCE(overrides?: CallOverrides): Promise<BigNumber>;

    UPDATE_PERMISSION(overrides?: CallOverrides): Promise<BigNumber>;

    __MasterAccessManagement_init(
      master_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    addCombinedPermissionsToRole(
      role_: string,
      description_: string,
      allowed_: IRBAC.ResourceWithPermissionsStruct[],
      disallowed_: IRBAC.ResourceWithPermissionsStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    addPermissionsToRole(
      role: string,
      permissionsToAdd: IRBAC.ResourceWithPermissionsStruct[],
      allowed: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getRolePermissions(
      role: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserRoles(who: string, overrides?: CallOverrides): Promise<BigNumber>;

    grantRoles(
      to: string,
      rolesToGrant: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    hasConstantsRegistryCreatePermission(
      account_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasConstantsRegistryDeletePermission(
      account_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasMasterContractsRegistryCreatePermission(
      account_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasMasterContractsRegistryDeletePermission(
      account_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasMasterContractsRegistryUpdatePermission(
      account_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasPermission(
      who: string,
      resource: string,
      permission: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasReviewableRequestsCreatePermission(
      account_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasReviewableRequestsDeletePermission(
      account_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasReviewableRequestsExecutePermission(
      account_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeCombinedPermissionsFromRole(
      role_: string,
      allowed_: IRBAC.ResourceWithPermissionsStruct[],
      disallowed_: IRBAC.ResourceWithPermissionsStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    removePermissionsFromRole(
      role: string,
      permissionsToRemove: IRBAC.ResourceWithPermissionsStruct[],
      allowed: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    revokeRoles(
      from: string,
      rolesToRevoke: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateRolePermissions(
      role_: string,
      description_: string,
      allowedToRemove_: IRBAC.ResourceWithPermissionsStruct[],
      disallowedToRemove_: IRBAC.ResourceWithPermissionsStruct[],
      allowedToAdd_: IRBAC.ResourceWithPermissionsStruct[],
      disallowedToAdd_: IRBAC.ResourceWithPermissionsStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateUserRoles(
      user_: string,
      rolesToRevoke_: string[],
      rolesToGrant_: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ALL_PERMISSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ALL_RESOURCE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    CONSTANTS_REGISTRY_RESOURCE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CREATE_PERMISSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DELETE_PERMISSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    EXECUTE_PERMISSION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MASTER_REGISTRY_RESOURCE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MASTER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    RBAC_RESOURCE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    READ_PERMISSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    REVIEWABLE_REQUESTS_RESOURCE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    UPDATE_PERMISSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    __MasterAccessManagement_init(
      master_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    addCombinedPermissionsToRole(
      role_: string,
      description_: string,
      allowed_: IRBAC.ResourceWithPermissionsStruct[],
      disallowed_: IRBAC.ResourceWithPermissionsStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    addPermissionsToRole(
      role: string,
      permissionsToAdd: IRBAC.ResourceWithPermissionsStruct[],
      allowed: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getRolePermissions(
      role: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserRoles(
      who: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRoles(
      to: string,
      rolesToGrant: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    hasConstantsRegistryCreatePermission(
      account_: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasConstantsRegistryDeletePermission(
      account_: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasMasterContractsRegistryCreatePermission(
      account_: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasMasterContractsRegistryDeletePermission(
      account_: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasMasterContractsRegistryUpdatePermission(
      account_: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasPermission(
      who: string,
      resource: string,
      permission: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasReviewableRequestsCreatePermission(
      account_: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasReviewableRequestsDeletePermission(
      account_: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasReviewableRequestsExecutePermission(
      account_: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeCombinedPermissionsFromRole(
      role_: string,
      allowed_: IRBAC.ResourceWithPermissionsStruct[],
      disallowed_: IRBAC.ResourceWithPermissionsStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    removePermissionsFromRole(
      role: string,
      permissionsToRemove: IRBAC.ResourceWithPermissionsStruct[],
      allowed: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    revokeRoles(
      from: string,
      rolesToRevoke: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateRolePermissions(
      role_: string,
      description_: string,
      allowedToRemove_: IRBAC.ResourceWithPermissionsStruct[],
      disallowedToRemove_: IRBAC.ResourceWithPermissionsStruct[],
      allowedToAdd_: IRBAC.ResourceWithPermissionsStruct[],
      disallowedToAdd_: IRBAC.ResourceWithPermissionsStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateUserRoles(
      user_: string,
      rolesToRevoke_: string[],
      rolesToGrant_: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
