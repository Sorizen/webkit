/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface ConstantsRegistryInterface extends utils.Interface {
  functions: {
    "addConstant(string,bytes)": FunctionFragment;
    "constants(string)": FunctionFragment;
    "getInjector()": FunctionFragment;
    "removeConstant(string)": FunctionFragment;
    "setDependencies(address)": FunctionFragment;
    "setInjector(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addConstant"
      | "constants"
      | "getInjector"
      | "removeConstant"
      | "setDependencies"
      | "setInjector"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addConstant",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "constants", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getInjector",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeConstant",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setDependencies",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setInjector", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "addConstant",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "constants", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getInjector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeConstant",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDependencies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInjector",
    data: BytesLike
  ): Result;

  events: {
    "AddedConstant(string,bytes)": EventFragment;
    "RemovedConstant(string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddedConstant"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemovedConstant"): EventFragment;
}

export interface AddedConstantEventObject {
  name: string;
  value: string;
}
export type AddedConstantEvent = TypedEvent<
  [string, string],
  AddedConstantEventObject
>;

export type AddedConstantEventFilter = TypedEventFilter<AddedConstantEvent>;

export interface RemovedConstantEventObject {
  name: string;
}
export type RemovedConstantEvent = TypedEvent<
  [string],
  RemovedConstantEventObject
>;

export type RemovedConstantEventFilter = TypedEventFilter<RemovedConstantEvent>;

export interface ConstantsRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ConstantsRegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addConstant(
      key_: string,
      value_: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    constants(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    getInjector(
      overrides?: CallOverrides
    ): Promise<[string] & { _injector: string }>;

    removeConstant(
      key_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setDependencies(
      registryAddress_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setInjector(
      _injector: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  addConstant(
    key_: string,
    value_: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  constants(arg0: string, overrides?: CallOverrides): Promise<string>;

  getInjector(overrides?: CallOverrides): Promise<string>;

  removeConstant(
    key_: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setDependencies(
    registryAddress_: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setInjector(
    _injector: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    addConstant(
      key_: string,
      value_: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    constants(arg0: string, overrides?: CallOverrides): Promise<string>;

    getInjector(overrides?: CallOverrides): Promise<string>;

    removeConstant(key_: string, overrides?: CallOverrides): Promise<void>;

    setDependencies(
      registryAddress_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setInjector(_injector: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "AddedConstant(string,bytes)"(
      name?: null,
      value?: null
    ): AddedConstantEventFilter;
    AddedConstant(name?: null, value?: null): AddedConstantEventFilter;

    "RemovedConstant(string)"(name?: null): RemovedConstantEventFilter;
    RemovedConstant(name?: null): RemovedConstantEventFilter;
  };

  estimateGas: {
    addConstant(
      key_: string,
      value_: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    constants(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    getInjector(overrides?: CallOverrides): Promise<BigNumber>;

    removeConstant(
      key_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setDependencies(
      registryAddress_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setInjector(
      _injector: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addConstant(
      key_: string,
      value_: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    constants(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getInjector(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeConstant(
      key_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setDependencies(
      registryAddress_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setInjector(
      _injector: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
