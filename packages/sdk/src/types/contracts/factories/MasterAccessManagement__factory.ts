/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  MasterAccessManagement,
  MasterAccessManagementInterface,
} from "../MasterAccessManagement";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "string",
        name: "role",
        type: "string",
      },
      {
        indexed: false,
        internalType: "string",
        name: "resource",
        type: "string",
      },
      {
        indexed: false,
        internalType: "string[]",
        name: "permissionsToAdd",
        type: "string[]",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "allowed",
        type: "bool",
      },
    ],
    name: "AddedPermissions",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "string",
        name: "role",
        type: "string",
      },
      {
        indexed: false,
        internalType: "string",
        name: "description",
        type: "string",
      },
    ],
    name: "AddedRoleWithDescription",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "string[]",
        name: "rolesToGrant",
        type: "string[]",
      },
    ],
    name: "GrantedRoles",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "string",
        name: "role",
        type: "string",
      },
      {
        indexed: false,
        internalType: "string",
        name: "resource",
        type: "string",
      },
      {
        indexed: false,
        internalType: "string[]",
        name: "permissionsToRemove",
        type: "string[]",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "allowed",
        type: "bool",
      },
    ],
    name: "RemovedPermissions",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: false,
        internalType: "string[]",
        name: "rolesToRevoke",
        type: "string[]",
      },
    ],
    name: "RevokedRoles",
    type: "event",
  },
  {
    inputs: [],
    name: "ALL_PERMISSION",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "ALL_RESOURCE",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "CONSTANTS_REGISTRY_RESOURCE",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "CREATE_PERMISSION",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "DELETE_PERMISSION",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "EXECUTE_PERMISSION",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "MASTER_REGISTRY_RESOURCE",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "MASTER_ROLE",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "RBAC_RESOURCE",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "READ_PERMISSION",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "REVIEWABLE_REQUESTS_RESOURCE",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "UPDATE_PERMISSION",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "master_",
        type: "address",
      },
    ],
    name: "__MasterAccessManagement_init",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "role_",
        type: "string",
      },
      {
        internalType: "string",
        name: "description_",
        type: "string",
      },
      {
        components: [
          {
            internalType: "string",
            name: "resource",
            type: "string",
          },
          {
            internalType: "string[]",
            name: "permissions",
            type: "string[]",
          },
        ],
        internalType: "struct IRBAC.ResourceWithPermissions[]",
        name: "allowed_",
        type: "tuple[]",
      },
      {
        components: [
          {
            internalType: "string",
            name: "resource",
            type: "string",
          },
          {
            internalType: "string[]",
            name: "permissions",
            type: "string[]",
          },
        ],
        internalType: "struct IRBAC.ResourceWithPermissions[]",
        name: "disallowed_",
        type: "tuple[]",
      },
    ],
    name: "addCombinedPermissionsToRole",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "role",
        type: "string",
      },
      {
        components: [
          {
            internalType: "string",
            name: "resource",
            type: "string",
          },
          {
            internalType: "string[]",
            name: "permissions",
            type: "string[]",
          },
        ],
        internalType: "struct IRBAC.ResourceWithPermissions[]",
        name: "permissionsToAdd",
        type: "tuple[]",
      },
      {
        internalType: "bool",
        name: "allowed",
        type: "bool",
      },
    ],
    name: "addPermissionsToRole",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "role",
        type: "string",
      },
    ],
    name: "getRolePermissions",
    outputs: [
      {
        components: [
          {
            internalType: "string",
            name: "resource",
            type: "string",
          },
          {
            internalType: "string[]",
            name: "permissions",
            type: "string[]",
          },
        ],
        internalType: "struct IRBAC.ResourceWithPermissions[]",
        name: "allowed",
        type: "tuple[]",
      },
      {
        components: [
          {
            internalType: "string",
            name: "resource",
            type: "string",
          },
          {
            internalType: "string[]",
            name: "permissions",
            type: "string[]",
          },
        ],
        internalType: "struct IRBAC.ResourceWithPermissions[]",
        name: "disallowed",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "who",
        type: "address",
      },
    ],
    name: "getUserRoles",
    outputs: [
      {
        internalType: "string[]",
        name: "roles",
        type: "string[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "string[]",
        name: "rolesToGrant",
        type: "string[]",
      },
    ],
    name: "grantRoles",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account_",
        type: "address",
      },
    ],
    name: "hasConstantsRegistryCreatePermission",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account_",
        type: "address",
      },
    ],
    name: "hasConstantsRegistryDeletePermission",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account_",
        type: "address",
      },
    ],
    name: "hasMasterContractsRegistryCreatePermission",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account_",
        type: "address",
      },
    ],
    name: "hasMasterContractsRegistryDeletePermission",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account_",
        type: "address",
      },
    ],
    name: "hasMasterContractsRegistryUpdatePermission",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "who",
        type: "address",
      },
      {
        internalType: "string",
        name: "resource",
        type: "string",
      },
      {
        internalType: "string",
        name: "permission",
        type: "string",
      },
    ],
    name: "hasPermission",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account_",
        type: "address",
      },
    ],
    name: "hasReviewableRequestsCreatePermission",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account_",
        type: "address",
      },
    ],
    name: "hasReviewableRequestsDeletePermission",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account_",
        type: "address",
      },
    ],
    name: "hasReviewableRequestsExecutePermission",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "role_",
        type: "string",
      },
      {
        components: [
          {
            internalType: "string",
            name: "resource",
            type: "string",
          },
          {
            internalType: "string[]",
            name: "permissions",
            type: "string[]",
          },
        ],
        internalType: "struct IRBAC.ResourceWithPermissions[]",
        name: "allowed_",
        type: "tuple[]",
      },
      {
        components: [
          {
            internalType: "string",
            name: "resource",
            type: "string",
          },
          {
            internalType: "string[]",
            name: "permissions",
            type: "string[]",
          },
        ],
        internalType: "struct IRBAC.ResourceWithPermissions[]",
        name: "disallowed_",
        type: "tuple[]",
      },
    ],
    name: "removeCombinedPermissionsFromRole",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "role",
        type: "string",
      },
      {
        components: [
          {
            internalType: "string",
            name: "resource",
            type: "string",
          },
          {
            internalType: "string[]",
            name: "permissions",
            type: "string[]",
          },
        ],
        internalType: "struct IRBAC.ResourceWithPermissions[]",
        name: "permissionsToRemove",
        type: "tuple[]",
      },
      {
        internalType: "bool",
        name: "allowed",
        type: "bool",
      },
    ],
    name: "removePermissionsFromRole",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "string[]",
        name: "rolesToRevoke",
        type: "string[]",
      },
    ],
    name: "revokeRoles",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "role_",
        type: "string",
      },
      {
        internalType: "string",
        name: "description_",
        type: "string",
      },
      {
        components: [
          {
            internalType: "string",
            name: "resource",
            type: "string",
          },
          {
            internalType: "string[]",
            name: "permissions",
            type: "string[]",
          },
        ],
        internalType: "struct IRBAC.ResourceWithPermissions[]",
        name: "allowedToRemove_",
        type: "tuple[]",
      },
      {
        components: [
          {
            internalType: "string",
            name: "resource",
            type: "string",
          },
          {
            internalType: "string[]",
            name: "permissions",
            type: "string[]",
          },
        ],
        internalType: "struct IRBAC.ResourceWithPermissions[]",
        name: "disallowedToRemove_",
        type: "tuple[]",
      },
      {
        components: [
          {
            internalType: "string",
            name: "resource",
            type: "string",
          },
          {
            internalType: "string[]",
            name: "permissions",
            type: "string[]",
          },
        ],
        internalType: "struct IRBAC.ResourceWithPermissions[]",
        name: "allowedToAdd_",
        type: "tuple[]",
      },
      {
        components: [
          {
            internalType: "string",
            name: "resource",
            type: "string",
          },
          {
            internalType: "string[]",
            name: "permissions",
            type: "string[]",
          },
        ],
        internalType: "struct IRBAC.ResourceWithPermissions[]",
        name: "disallowedToAdd_",
        type: "tuple[]",
      },
    ],
    name: "updateRolePermissions",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user_",
        type: "address",
      },
      {
        internalType: "string[]",
        name: "rolesToRevoke_",
        type: "string[]",
      },
      {
        internalType: "string[]",
        name: "rolesToGrant_",
        type: "string[]",
      },
    ],
    name: "updateUserRoles",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class MasterAccessManagement__factory {
  static readonly abi = _abi;
  static createInterface(): MasterAccessManagementInterface {
    return new utils.Interface(_abi) as MasterAccessManagementInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MasterAccessManagement {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as MasterAccessManagement;
  }
}
